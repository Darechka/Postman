{
	"info": {
		"_postman_id": "8e916898-25b4-45ac-afce-b6beed0fcf81",
		"name": "postman_homework_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16338735"
	},
	"item": [
		{
			"name": "ep_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Проверить, что статус-код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверить, что в body приходит правильный string:\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "ep_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Проверить, что статус-код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json:\r",
							"let response = pm.response.json();\r",
							"\r",
							"// Спарсить request:\r",
							"let requestParams = {};\r",
							"pm.request.url.query.all().forEach(elem => requestParams[elem.key] = elem.value);\r",
							"\r",
							"// Проверить, что name в ответе равно name из request (name забрать из request):\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(response.name).to.eql(requestParams.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age из request (age забрать из request):\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(response.age).to.eql(requestParams.age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary из request (salary забрать из request):\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(response.salary).to.eql(+requestParams.salary);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response:\r",
							"console.log(response.family);\r",
							"\r",
							"// Проверить, что у параметра dog есть параметр name:\r",
							"pm.test(\" Check that 'dog' parameter has 'name' property\", function () {\r",
							"    pm.expect(response.family.pets.dog).to.have.property('name');\r",
							"});\r",
							"\r",
							"//  Проверить, что у параметра dog есть параметр age:\r",
							"pm.test(\" Check that 'dog' parameter has 'age' property\", function () {\r",
							"    pm.expect(response.family.pets.dog).to.have.property('age');\r",
							"});\r",
							"\r",
							"// Проверить, что параметр name имеет значение Luky:\r",
							"pm.test(\" Check the 'name' value of the 'dog' parameter\", function () {\r",
							"    pm.expect(response.family.pets.dog.name).to.equal('Luky');\r",
							"});\r",
							"\r",
							"// Проверить, что параметр age имеет значение 4:\r",
							"pm.test(\" Check the 'age' value of the 'dog' parameter\", function () {\r",
							"    pm.expect(response.family.pets.dog.age).to.equal(4);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Dasha&age=34&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Dasha"
						},
						{
							"key": "age",
							"value": "34"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ep_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Проверить, что статус-код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json:\r",
							"let response = pm.response.json();\r",
							"\r",
							"// Спарсить request:\r",
							"let requestParams = {};\r",
							"pm.request.url.query.all().forEach(elem => requestParams[elem.key] = elem.value);\r",
							"\r",
							"// Проверить, что name в ответе равно name из request (name забрать из request):\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(response.name).to.eql(requestParams.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age из request (age забрать из request):\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(response.age).to.eql(+requestParams.age);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр salary из request:\r",
							"console.log(requestParams.salary);\r",
							"\r",
							"// Вывести в консоль параметр salary из response:\r",
							"console.log(response.salary);\r",
							"\r",
							"// Вывести в консоль 0-й элемент параметра salary из response:\r",
							"console.log(response.salary[0]);\r",
							"\r",
							"// Вывести в консоль 1-й элемент параметра salary параметр salary из response:\r",
							"console.log(response.salary[1]);\r",
							"\r",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response:\r",
							"console.log(response.salary[2]);\r",
							"\r",
							"// Проверить, что 0-й элемент параметра salary равен salary из request:\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(response.salary[0]).to.eql(+requestParams.salary);\r",
							"});\r",
							"\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request:\r",
							"pm.test(\"Check salary * 2\", function () {\r",
							"    pm.expect(+response.salary[1]).to.eql(requestParams.salary * 2);\r",
							"});\r",
							"\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request:\r",
							"pm.test(\"Check salary * 3\", function () {\r",
							"    pm.expect(+response.salary[2]).to.eql(requestParams.salary * 3);\r",
							"});\r",
							"\r",
							"// Создать переменные для name, age, salary:\r",
							"let userName = response.name;\r",
							"let userAge = response.age;\r",
							"let userSalary = response.salary[0];\r",
							"\r",
							"// Передать в окружение переменные name, age, salary:\r",
							"pm.environment.set(\"name\", userName);\r",
							"pm.environment.set(\"age\", userAge);\r",
							"pm.environment.set(\"salary\", userSalary);\r",
							"\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary:\r",
							"response.salary.forEach(elem => console.log(elem));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Dasha&age=34&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Dasha"
						},
						{
							"key": "age",
							"value": "34"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ep_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Проверить, что статус-код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json: \r",
							"let response = pm.response.json();\r",
							"\r",
							"// Спарсить request:\r",
							"let requestBody = request.data;\r",
							"\r",
							"// Проверить, что json response имеет параметр start_qa_salary:\r",
							"pm.test(\"Check that 'start_qa_salary' property exists\", function () {\r",
							"    pm.expect(response).to.have.property('start_qa_salary');\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months:\r",
							"pm.test(\"Check that 'qa_salary_after_6_months' property exists\", function () {\r",
							"    pm.expect(response).to.have.property('qa_salary_after_6_months');\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months:\r",
							"pm.test(\"Check that 'qa_salary_after_12_months' property exists\", function () {\r",
							"    pm.expect(response).to.have.property('qa_salary_after_12_months');\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year:\r",
							"pm.test(\"Check that 'qa_salary_after_1.5_year' property exists\", function () {\r",
							"    pm.expect(response).to.have.property('qa_salary_after_1.5_year');\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years:\r",
							"pm.test(\"Check that 'qa_salary_after_3.5_years' property exists\", function () {\r",
							"    pm.expect(response).to.have.property('qa_salary_after_3.5_years');\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр person:\r",
							"pm.test(\"Check that 'person' property exists\", function () {\r",
							"    pm.expect(response).to.have.property('person');\r",
							"});\r",
							"\r",
							"// Проверить, что параметр start_qa_salary равен salary из request:\r",
							"pm.test(\"Check 'start_qa_salary' value\", function () {\r",
							"    pm.expect(response.start_qa_salary).to.equal(+requestBody.salary);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request:\r",
							"pm.test(\"Check 'qa_salary_after_6_months' value\", function () {\r",
							"    pm.expect(response.qa_salary_after_6_months).to.equal(requestBody.salary * 2);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request:\r",
							"pm.test(\"Check 'qa_salary_after_12_months' value\", function () {\r",
							"    pm.expect(response.qa_salary_after_12_months).to.equal(requestBody.salary * 2.7);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request:\r",
							"pm.test(\"Check 'qa_salary_after_1.5_year' value\", function () {\r",
							"    pm.expect(response['qa_salary_after_1.5_year']).to.equal(requestBody.salary * 3.3);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request:\r",
							"pm.test(\"Check 'qa_salary_after_3.5_years' value\", function () {\r",
							"    pm.expect(response['qa_salary_after_3.5_years']).to.equal(requestBody.salary * 3.8);\r",
							"});\r",
							"\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request:\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(response.person.u_name[1]).to.equal(+requestBody.salary);\r",
							"});\r",
							"\r",
							"// Проверить, что что параметр u_age равен age из request:\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(response.person.u_age).to.equal(+requestBody.age);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request:\r",
							"pm.test(\"Check 'u_salary_5_years' value\", function () {\r",
							"    pm.expect(response.person.u_salary_5_years).to.equal(requestBody.salary * 4.2);\r",
							"});\r",
							"\r",
							"// Написать цикл который выведет в консоль по порядку пары ключ-значение из параметра person:\r",
							"for (let key in response.person) {\r",
							"    console.log(key + ': ' + response.person[key]);\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Dasha",
							"type": "text"
						},
						{
							"key": "age",
							"value": "34",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "ep_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Проверить, что статус-код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json:\r",
							"let response = pm.response.json();\r",
							"\r",
							"// Спарсить request:\r",
							"let requestBody = request.data;\r",
							"\r",
							"// Проверить, что name в ответе равно name из request (name забрать из request):\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(response.name).to.eql(requestBody.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age из request (age забрать из request):\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(response.age).to.eql(requestBody.age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary из request (salary забрать из request):\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(response.salary).to.eql(+requestBody.salary);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response:\r",
							"console.log(requestBody.family);\r",
							"\r",
							"// Проверить, что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request):\r",
							"pm.test(\"Check salary after 1,5 year\", function () {\r",
							"    pm.expect(response.family.u_salary_1_5_year).to.eql(requestBody.salary * 4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Dasha",
							"type": "text"
						},
						{
							"key": "age",
							"value": "34",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		}
	]
}